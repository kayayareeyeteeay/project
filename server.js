const express = require('express');
const WebSocket = require('ws');
const path = require('path');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const sql = require('mssql');
const axios = require('axios');
const nodemailer = require('nodemailer');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;
const SECRET_KEY = process.env.JWT_SECRET || "fundelio_secret";

const dbConfig = {
    user: process.env.DB_USER,
    password: process.env.DB_PASS,
    server: process.env.DB_SERVER,
    database: process.env.DB_NAME,
    options: {
        encrypt: true,
        trustServerCertificate: false
    }
};

// Nodemailer transporter
const transporter = nodemailer.createTransport({
    host: process.env.EMAIL_HOST,
    port: parseInt(process.env.EMAIL_PORT),
    secure: false,
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
    }
});

app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'Pages')));
app.use('/css', express.static(path.join(__dirname, 'css')));
app.use('/js', express.static(path.join(__dirname, 'js')));
app.use('/img', express.static(path.join(__dirname, 'img')));

// Middleware: authenticate JWT and attach user info
function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    if (!token) return res.sendStatus(401);

    jwt.verify(token, SECRET_KEY, (err, user) => {
        if (err) return res.sendStatus(403);
        req.user = user;
        next();
    });
}

//Regisztr√°ci√≥ kezd≈ë egyenleg be√°ll√≠t√°sa
app.post('/api/register', async (req, res) => {
    const { name, email, password } = req.body;
    try {
        const pool = await sql.connect(dbConfig);
        // E-mail ellen≈ërz√©s
        const check = await pool.request()
            .input('email', sql.NVarChar, email)
            .query('SELECT Felhaszn√°l√≥ID FROM Felhaszn√°l√≥ WHERE Email = @email');
        if (check.recordset.length > 0) {
            return res.status(400).json({ message: 'Ez az e-mail m√°r foglalt.' });
        }
        // Jelsz√≥ hashel√©se
        const hashedPassword = await bcrypt.hash(password, 10);
        // Felhaszn√°l√≥ besz√∫r√°s
        const insertUser = await pool.request()
            .input('name', sql.NVarChar, name)
            .input('email', sql.NVarChar, email)
            .input('password', sql.NVarChar, hashedPassword)
            .query(
                `INSERT INTO Felhaszn√°l√≥ (N√©v, Email, Jelsz√≥)
                 OUTPUT INSERTED.Felhaszn√°l√≥ID
                 VALUES (@name, @email, @password)`
            );
        const userId = insertUser.recordset[0].Felhaszn√°l√≥ID;
        // Kezd≈ë egyenleg 10000 USD, √ºres kripto- √©s r√©szv√©ny√°llom√°ny
        await pool.request()
            .input('id', sql.Int, userId)
            .input('balance', sql.Float, 10000)
            .input('currency', sql.NVarChar, 'USD')
            .input('crypto', sql.NVarChar, JSON.stringify({}))
            .input('stocks', sql.NVarChar, JSON.stringify({}))
            .query(
                `INSERT INTO Felhaszn√°l√≥Egyenleg
                 (Felhaszn√°l√≥ID, Egyenleg, Deviza, CryptoMennyis√©g, R√©szv√©nyMennyis√©g)
                 VALUES(@id, @balance, @currency, @crypto, @stocks)`
            );
        res.status(201).json({ message: 'Sikeres regisztr√°ci√≥!' });
    } catch (err) {
        console.error('Regisztr√°ci√≥s hiba:', err);
        res.status(500).json({ message: 'Szerverhiba regisztr√°ci√≥ k√∂zben.' });
    }
});

// Bejelentkez√©s
app.post('/api/login', async (req, res) => {
    const { email, password } = req.body;
    try {
        const pool = await sql.connect(dbConfig);
        const result = await pool.request()
            .input('email', sql.NVarChar, email)
            .query('SELECT Felhaszn√°l√≥ID, N√©v, Email, Jelsz√≥ FROM Felhaszn√°l√≥ WHERE Email = @email');
        if (result.recordset.length === 0) {
            return res.status(401).json({ message: 'Hib√°s e-mail vagy jelsz√≥.' });
        }
        const user = result.recordset[0];
        const valid = await bcrypt.compare(password, user.Jelsz√≥);
        if (!valid) {
            return res.status(401).json({ message: 'Hib√°s e-mail vagy jelsz√≥.' });
        }
        // Token gener√°l√°sa
        const token = jwt.sign(
            { id: user.Felhaszn√°l√≥ID, email: user.Email },
            SECRET_KEY,
            { expiresIn: '2h' }
        );
        res.json({ token, name: user.N√©v, email: user.Email });
    } catch (err) {
        console.error('Bejelentkez√©si hiba:', err);
        res.status(500).json({ message: 'Szerverhiba bejelentkez√©s k√∂zben.' });
    }
});

// üîÑ Egyenleg lek√©r√©s (userdata)
app.get('/api/userdata', authenticateToken, async (req, res) => {
    try {
        const pool = await sql.connect(dbConfig);
        const result = await pool.request()
            .input('id', sql.Int, req.user.id)
            .query(
                `SELECT Egyenleg, Deviza, CryptoMennyis√©g, R√©szv√©nyMennyis√©g
                 FROM Felhaszn√°l√≥Egyenleg
                 WHERE Felhaszn√°l√≥ID = @id`
            );
        if (result.recordset.length === 0) {
            return res.status(404).json({ message: 'Nincs egyenleg adat.' });
        }
        const row = result.recordset[0];
        res.json({
            balance:        row.Egyenleg,
            currency:       row.Deviza,
            cryptoQuantity: JSON.parse(row.CryptoMennyis√©g || '{}'),
            stockQuantity : JSON.parse(row.R√©szv√©nyMennyis√©g || '{}')
        });
    } catch (err) {
        console.error('Lekeres√©si hiba:', err);
        res.status(500).json({ message: 'Szerverhiba.' });
    }
});

//Tranzakci√≥k kezel√©se, egyenleg- √©s kriptofriss√≠t√©s
app.post('/api/transactions', authenticateToken, async (req, res) => {
    const { type, amount, currency, crypto, price } = req.body;
    try {
        const pool = await sql.connect(dbConfig);
        // 1) Tranzakci√≥ besz√∫r√°sa
        const insert = await pool.request()
            .input('uid',        sql.Int,         req.user.id)
            .input('szimbolum',   sql.NVarChar,    crypto || null)
            .input('mennyiseg',   sql.Decimal(18,8), amount)
            .input('ar',          sql.Decimal(18,8), price || null)
            .input('tipus',       sql.NVarChar,    type)
            .query(
                `INSERT INTO dbo.Tranzakci√≥k
                  (Felhaszn√°l√≥ID, Szimb√≥lum, Mennyis√©g, √År, T√≠pus)
                 VALUES
                  (@uid, @szimbolum, @mennyiseg, @ar, @tipus);
                 SELECT SCOPE_IDENTITY() AS Tranzakci√≥ID;`
            );
        const txId = insert.recordset[0].Tranzakci√≥ID;
        // 2) Aktu√°lis egyenleg √©s kripto lek√©r√©se
        const balRes = await pool.request()
            .input('uid', sql.Int, req.user.id)
            .query(
                `SELECT Egyenleg, CryptoMennyis√©g
                 FROM dbo.Felhaszn√°l√≥Egyenleg
                 WHERE Felhaszn√°l√≥ID = @uid`
            );
        if (!balRes.recordset.length) {
            throw new Error('Nincs egyenleg adat!');
        }
        let { Egyenleg, CryptoMennyis√©g } = balRes.recordset[0];
        let cryptoObj = JSON.parse(CryptoMennyis√©g || '{}');
        // 3) Egyenleg m√≥dos√≠t√°sa t√≠pus szerint
        switch (type) {
            case 'V√©tel': {
                const cost = amount * price;
                if (Egyenleg < cost) return res.status(400).json({ message: 'Nincs el√©g USD kript√≥ v√°s√°rl√°shoz.' });
                Egyenleg -= cost;
                cryptoObj[crypto] = (cryptoObj[crypto] || 0) + amount;
                break;
            }
            case 'Elad√°s': {
                if ((cryptoObj[crypto] || 0) < amount) return res.status(400).json({ message: 'Nincs el√©g kript√≥d elad√°sra.' });
                const proceeds = amount * price;
                Egyenleg += proceeds;
                cryptoObj[crypto] -= amount;
                break;
            }
            default:
                return res.status(400).json({ message: 'Ismeretlen tranzakci√≥t√≠pus.' });
        }

        // 4) Egyenleg friss√≠t√©se adatb√°zisban
        await pool.request()
            .input('uid',     sql.Int,      req.user.id)
            .input('balance', sql.Float,    Egyenleg)
            .input('crypto',  sql.NVarChar, JSON.stringify(cryptoObj))
            .query(
                `UPDATE dbo.Felhaszn√°l√≥Egyenleg
                 SET Egyenleg = @balance,
                     CryptoMennyis√©g = @crypto
                 WHERE Felhaszn√°l√≥ID = @uid`
            );
        res.status(201).json({ success: true, transactionId: txId, balance: Egyenleg, crypto: cryptoObj });
    } catch (err) {
        console.error('Tranzakci√≥s hiba:', err);
        res.status(500).json({ message: err.message || 'Hiba a tranzakci√≥ sor√°n.' });
    }
});

// GET tranzakci√≥lista
app.get('/api/transactions', authenticateToken, async (req, res) => {
    try {
        const pool = await sql.connect(dbConfig);
        const result = await pool.request()
            .input('uid', sql.Int, req.user.id)
            .query(
                `SELECT Tranzakci√≥ID,
                        T√≠pus AS type,
                        Mennyis√©g AS amount,
                        √År AS price,
                        Szimb√≥lum AS crypto,
                        D√°tum AS createdAt
                 FROM dbo.Tranzakci√≥k
                 WHERE Felhaszn√°l√≥ID = @uid
                 ORDER BY D√°tum DESC`
            );
        res.json({ transactions: result.recordset });
    } catch (err) {
        console.error('Lek√©rdez√©si hiba:', err);
        res.status(500).json({ message: 'Hiba a tranzakci√≥k lek√©r√©sekor.' });
    }
    console.log("Kapott tranzakci√≥:", { type, amount, price, crypto, currency });
});

// üìà Binance WebSocket kripto√°rfolyamokhoz
const symbols = ['btcusdt', 'ethusdt', 'dogeusdt', 'xrpusdt', 'trumpusdt', 'solusdt'];
const streams = symbols.map(s => `${s}@trade`).join('/');
const ws = new WebSocket(`wss://stream.binance.com:9443/stream?streams=${streams}`);
let prices = {};
ws.on('message', data => {
    const trade = JSON.parse(data).data;
    prices[trade.s.toLowerCase()] = trade.p;
});
app.get('/api/live/:symbol', (req, res) => {
    const symbol = req.params.symbol.toLowerCase();
    if (prices[symbol]) return res.json({ symbol, price: prices[symbol] });
    res.status(500).json({ error: 'Nincs √©l≈ë adat ehhez a kript√≥hoz' });
});

// üìä R√©szv√©nyadatok
const TWELVE_DATA_API_KEY = 'b6e3585ebb094839929ee2d793b8e45d';
const stockSymbols = ['SPY', 'NVDA', 'MSFT'];
app.get('/api/stocks', async (req, res) => {
    try {
        const data = await Promise.all(stockSymbols.map(async symbol => {
            const resp = await axios.get(
                `https://api.twelvedata.com/price?symbol=${symbol}&apikey=${TWELVE_DATA_API_KEY}`
            );
            return { symbol, price: resp.data.price };
        }));
        res.json(data);
    } catch (err) {
        console.error('R√©szv√©nyadat hiba:', err);
        res.status(500).json({ message: 'Hiba a r√©szv√©nyadatok lek√©r√©sekor.' });
    }
});

// üåê Alap√©rtelmezett oldal
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'Pages', 'auth', 'bejelentkez√©s.html'));
});

// üöÄ Szerver ind√≠t√°sa
app.listen(PORT, () => console.log(`‚úÖ Szerver fut: http://localhost:${PORT}`));
