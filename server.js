// üìÅ server.js ‚Äì Fundelio (Teljes verzi√≥ emailes jelsz√≥ vissza√°ll√≠t√°ssal √©s regisztr√°ci√≥val)

const express = require('express');
const WebSocket = require('ws');
const path = require('path');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const sql = require('mssql');
const axios = require('axios');
const nodemailer = require('nodemailer');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;
const SECRET_KEY = process.env.JWT_SECRET || "fundelio_secret";

const dbConfig = {
    user: process.env.DB_USER,
    password: process.env.DB_PASS,
    server: process.env.DB_SERVER,
    database: process.env.DB_NAME,
    options: {
        encrypt: true,
        trustServerCertificate: false
    }
};

const transporter = nodemailer.createTransport({
    host: process.env.EMAIL_HOST,
    port: parseInt(process.env.EMAIL_PORT),
    secure: false,
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
    }
});

app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'Pages')));
app.use('/css', express.static(path.join(__dirname, 'css')));
app.use('/js', express.static(path.join(__dirname, 'js')));
app.use('/img', express.static(path.join(__dirname, 'img')));

function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    if (!token) return res.sendStatus(401);

    jwt.verify(token, SECRET_KEY, (err, user) => {
        if (err) return res.sendStatus(403);
        req.user = user;
        next();
    });
}

// üîê Regisztr√°ci√≥ e-mail k√ºld√©ssel
app.post('/api/register', async (req, res) => {
    const { name, email, password } = req.body;
    try {
        const pool = await sql.connect(dbConfig);
        const check = await pool.request()
            .input('email', sql.NVarChar, email)
            .query('SELECT * FROM Felhaszn√°l√≥ WHERE Email = @email');

        if (check.recordset.length > 0) {
            return res.status(400).json({ message: 'Ez az e-mail m√°r foglalt.' });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const insertUser = await pool.request()
            .input('name', sql.NVarChar, name)
            .input('email', sql.NVarChar, email)
            .input('password', sql.NVarChar, hashedPassword)
            .query(`INSERT INTO Felhaszn√°l√≥ (N√©v, Email, Jelsz√≥) OUTPUT INSERTED.Felhaszn√°l√≥ID VALUES (@name, @email, @password)`);

        const userId = insertUser.recordset[0].Felhaszn√°l√≥ID;

        await pool.request()
            .input('id', sql.Int, userId)
            .input('balance', sql.Float, 10000)
            .input('currency', sql.NVarChar, 'USD')
            .input('crypto', sql.NVarChar, JSON.stringify({ btcusdt: 0 }))
            .input('stocks', sql.NVarChar, JSON.stringify({}))
            .query(`INSERT INTO Felhaszn√°l√≥Egyenleg (Felhaszn√°l√≥ID, Egyenleg, Deviza, CryptoMennyis√©g, R√©szv√©nyMennyis√©g) VALUES (@id, @balance, @currency, @crypto, @stocks)`);

        await transporter.sendMail({
            from: `Fundelio <${process.env.EMAIL_USER}>`,
            to: email,
            subject: "Sikeres regisztr√°ci√≥ - Fundelio",
            html: `<h2>Kedves ${name}!</h2><p>K√∂sz√∂nj√ºk, hogy regisztr√°lt√°l a Fundeliora.</p><p>Most m√°r be tudsz jelentkezni.</p>`
        });

        res.status(201).json({ message: 'Sikeres regisztr√°ci√≥!' });
    } catch (err) {
        console.error('Regisztr√°ci√≥s hiba:', err);
        res.status(500).json({ message: 'Szerverhiba regisztr√°ci√≥ k√∂zben.' });
    }
});

// üîê Bejelentkez√©s
app.post('/api/login', async (req, res) => {
    const { email, password } = req.body;
    try {
        const pool = await sql.connect(dbConfig);
        const result = await pool.request()
            .input('email', sql.NVarChar, email)
            .query('SELECT * FROM Felhaszn√°l√≥ WHERE Email = @email');

        if (result.recordset.length === 0) {
            return res.status(401).json({ message: 'Hib√°s e-mail vagy jelsz√≥.' });
        }

        const user = result.recordset[0];
        const valid = await bcrypt.compare(password, user.Jelsz√≥);

        if (!valid) {
            return res.status(401).json({ message: 'Hib√°s e-mail vagy jelsz√≥.' });
        }

        const token = jwt.sign({ id: user.Felhaszn√°l√≥ID }, SECRET_KEY, { expiresIn: '2h' });

        res.json({ token, name: user.N√©v, email: user.Email });
    } catch (err) {
        console.error('Bejelentkez√©si hiba:', err);
        res.status(500).json({ message: 'Szerverhiba bejelentkez√©s k√∂zben.' });
    }
});

// üîÅ Elfelejtett jelsz√≥ - email k√ºld√©s
app.post('/api/forgot-password', async (req, res) => {
    const { email } = req.body;
    try {
        const pool = await sql.connect(dbConfig);
        const result = await pool.request()
            .input('email', sql.NVarChar, email)
            .query('SELECT Felhaszn√°l√≥ID, N√©v FROM Felhaszn√°l√≥ WHERE Email = @email');

        if (result.recordset.length === 0) {
            return res.status(404).json({ message: 'Nem tal√°lhat√≥ ilyen e-mail.' });
        }

        const user = result.recordset[0];
        const resetToken = jwt.sign({ id: user.Felhaszn√°l√≥ID }, SECRET_KEY, { expiresIn: '15m' });
        const resetLink = `https://fundelio.hu/reset-password.html?token=${resetToken}`;

        await transporter.sendMail({
            from: `Fundelio <${process.env.EMAIL_USER}>`,
            to: email,
            subject: "Jelsz√≥ vissza√°ll√≠t√°s - Fundelio",
            html: `<h2>Szia ${user.N√©v}!</h2><p>Kattints a linkre, hogy √∫j jelsz√≥t √°ll√≠ts be:</p><a href="${resetLink}">${resetLink}</a>`
        });

        res.json({ message: 'E-mail elk√ºldve.' });
    } catch (err) {
        console.error("Forgot password error:", err);
        res.status(500).json({ message: 'Hiba t√∂rt√©nt.' });
    }
});

// üîÅ Jelsz√≥ √∫jra√°ll√≠t√°s tokennel
app.post('/api/reset-password', async (req, res) => {
    const { token, newPassword } = req.body;
    try {
        const decoded = jwt.verify(token, SECRET_KEY);
        const hashed = await bcrypt.hash(newPassword, 10);

        const pool = await sql.connect(dbConfig);
        await pool.request()
            .input('id', sql.Int, decoded.id)
            .input('pwd', sql.NVarChar, hashed)
            .query('UPDATE Felhaszn√°l√≥ SET Jelsz√≥ = @pwd WHERE Felhaszn√°l√≥ID = @id');

        res.json({ message: 'Jelsz√≥ friss√≠tve!' });
    } catch (err) {
        console.error("Reset error:", err);
        res.status(400).json({ message: '√ârv√©nytelen vagy lej√°rt token.' });
    }
});

// üîÑ Egyenleg lek√©r√©s √©s friss√≠t√©s
app.get('/api/userdata', authenticateToken, async (req, res) => {
    try {
        const pool = await sql.connect(dbConfig);
        const result = await pool.request()
            .input('id', sql.Int, req.user.id)
            .query('SELECT Egyenleg, Deviza, CryptoMennyis√©g, R√©szv√©nyMennyis√©g FROM Felhaszn√°l√≥Egyenleg WHERE Felhaszn√°l√≥ID = @id');

        if (result.recordset.length === 0) {
            return res.status(404).json({ message: 'Nincs egyenleg adat.' });
        }

        const row = result.recordset[0];
        res.json({
            balance: row.Egyenleg,
            currency: row.Deviza,
            cryptoQuantity: JSON.parse(row.CryptoMennyis√©g || '{}'),
            stockQuantity: JSON.parse(row.R√©szv√©nyMennyis√©g || '{}')
        });
    } catch (err) {
        console.error('Lekeres√©si hiba:', err);
        res.status(500).json({ message: 'Szerverhiba.' });
    }
});

app.post('/api/userdata', authenticateToken, async (req, res) => {
    const { balance, currency, cryptoQuantity, stockQuantity } = req.body;
    try {
        const pool = await sql.connect(dbConfig);
        await pool.request()
            .input('id', sql.Int, req.user.id)
            .input('balance', sql.Float, balance)
            .input('currency', sql.NVarChar, currency)
            .input('crypto', sql.NVarChar, JSON.stringify(cryptoQuantity))
            .input('stocks', sql.NVarChar, JSON.stringify(stockQuantity))
            .query(`UPDATE Felhaszn√°l√≥Egyenleg SET Egyenleg = @balance, Deviza = @currency, CryptoMennyis√©g = @crypto, R√©szv√©nyMennyis√©g = @stocks WHERE Felhaszn√°l√≥ID = @id`);

        res.json({ message: 'Adatok friss√≠tve.' });
    } catch (err) {
        console.error('Ment√©si hiba:', err);
        res.status(500).json({ message: 'Hiba ment√©s k√∂zben.' });
    }
});

// üìà Binance WebSocket kripto√°rfolyamokhoz
const symbols = ['btcusdt', 'ethusdt', 'dogeusdt', 'xrpusdt', 'trumpusdt', 'solusdt'];
const streams = symbols.map(symbol => `${symbol}@trade`).join('/');
const ws = new WebSocket(`wss://stream.binance.com:9443/stream?streams=${streams}`);

let prices = {};
ws.on('message', (data) => {
    const parsedData = JSON.parse(data);
    const trade = parsedData.data;
    prices[trade.s.toLowerCase()] = trade.p;
});

app.get('/api/live/:symbol', (req, res) => {
    const symbol = req.params.symbol.toLowerCase();
    if (prices[symbol]) {
        res.json({ symbol, price: prices[symbol] });
    } else {
        res.status(500).json({ error: "Nincs √©l≈ë adat ehhez a kript√≥hoz" });
    }
});

// üìä R√©szv√©nyadatok
const TWELVE_DATA_API_KEY = process.env.TWELVE_API_KEY;
const stockSymbols = ['SPY', 'NVDA', 'MSFT'];

app.get('/api/stocks', async (req, res) => {
    try {
        const stockData = await Promise.all(stockSymbols.map(async (symbol) => {
            const response = await axios.get(`https://api.twelvedata.com/price?symbol=${symbol}&apikey=${TWELVE_DATA_API_KEY}`);
            return { symbol, price: response.data.price };
        }));
        res.json(stockData);
    } catch (error) {
        res.status(500).json({ message: "Hiba a r√©szv√©nyadatok lek√©r√©sekor!", error });
    }
});

// üåê Alap√©rtelmezett oldal
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'Pages', 'auth', 'bejelentkez√©s.html'));
});

// üöÄ Szerver ind√≠t√°sa
app.listen(PORT, () => {
    console.log(`‚úÖ Szerver fut: http://localhost:${PORT}`);
});
